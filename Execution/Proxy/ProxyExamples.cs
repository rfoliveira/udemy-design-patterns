using System;
using System.Collections.Generic;
using static System.Console;

namespace Execution.Proxy
{
    #region Protection Proxy
    public interface ICar
    {
        void Drive();
    }

    public class Car : ICar
    {
        public void Drive()
        {
            WriteLine("Car is being driven");
        }
    }

    public class Driver
    {
        public int Age { get; set; }

        public Driver(int age)
        {
            Age = age;
        }
    }

    public class CarProxy : ICar
    {
        private Driver driver;
        private Car car = new Car();

        public CarProxy(Driver driver)
        {
            this.driver = driver ?? throw new ArgumentNullException(nameof(driver));
        }

        public void Drive()
        {
            if (driver.Age >= 18)
                car.Drive();
            else
                WriteLine("too young");
        }
    }
    #endregion  

    #region Property proxy
    public class Property<T> : IEquatable<Property<T>> where T: new()
    {
        private T value;
        public T Value
        {
            get => value;
            set
            {
                // to avoid repetitions...
                if (Equals(this.value, value)) return;

                WriteLine($"Assigning value to {value}");
                this.value = value;
            }
        }

        public Property() : this(default(T))
        //public Property(): this(Activator.CreateInstance<T>())
        {

        }

        public Property(T value)
        {
            this.value = value;
        }

        public static implicit operator T(Property<T> property)
        {
            return property.value;  // int n = p_int;
        }

        public static implicit operator Property<T>(T value)
        {
            return new Property<T>(value);  // Property<int> p = 123
        }

        public override bool Equals(object obj)
        {
            // generated by visual studio
            return Equals(obj as Property<T>);

            // generated by ReSharper....
            //if (ReferenceEquals(null, obj)) return false;
            //if (ReferenceEquals(this, obj)) return true;
            //if (obj.GetType() != this.GetType()) return false;
            //return Equals((Property<T>)obj);
        }

        public bool Equals(Property<T> other)
        {
            // generated by visual studio
            return other != null &&
                   EqualityComparer<T>.Default.Equals(value, other.value) &&
                   EqualityComparer<T>.Default.Equals(Value, other.Value);

            // benerated by ReSharper (from video...)
            //if (ReferenceEquals(null, other)) return false;
            //if (ReferenceEquals(this, other)) return true;
            //return EqualityComparer<T>.Default.Equals(value, other.value);
        }

        public override int GetHashCode()
        {
            // generated by visual studio
            //var hashCode = 1927018180;
            //hashCode = hashCode * -1521134295 + EqualityComparer<T>.Default.GetHashCode(value);
            //hashCode = hashCode * -1521134295 + EqualityComparer<T>.Default.GetHashCode(Value);
            //return hashCode;

            // benerated by ReSharper 
            //return EqualityComparer<T>.Default.GetHashCode(value);

            // by video 
            return value.GetHashCode();
        }

        public static bool operator ==(Property<T> left, Property<T> right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Property<T> left, Property<T> right)
        {
            return !Equals(left, right);
        }
    }
    
    public class Creature
    {
        //public Property<int> Agility { get; set; }    // to correct assigning...
        private Property<int> agility = new Property<int>();
        public int Agility
        {
            get => agility.Value;
            set => agility.Value = value;
        }
    }
    #endregion

    public static class ProxyExamples
    {
        public static void ProtetorProxy()
        {
            ICar car = new CarProxy(new Driver(12));
            WriteLine(car);

            ICar car2 = new CarProxy(new Driver(22));
            WriteLine(car2);
        }

        public static void PropertyProxy()
        {
            var c = new Creature();
            c.Agility = 10; //c.set_Agility(10) not work (in c# we cannot overload que "=" operator
            // to correct way, you beed to do this "c.Agility = new Property<int>(10)"
            c.Agility = 10;
        }

        public static void DynamicProxyForLogging()
        {

        }
    }
}

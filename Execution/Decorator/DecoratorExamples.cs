using System;
using System.Runtime.Serialization;
using System.Text;
using static System.Console;

namespace Execution.Decorator
{
    public class CodeBuilderWithDecorator
    {
        private StringBuilder builder = new StringBuilder();

        public override string ToString()
        {
            return builder.ToString();
        }

        #region StringBuilder delegate methods
        // all methods below was generated by Resharp and are all delegate methods fields of StringBuilder class...
        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            ((ISerializable)builder).GetObjectData(info, context);
        }

        public int EnsureCapacity(int capacity)
        {
            return builder.EnsureCapacity(capacity);
        }

        public string ToString(int startIndex, int length)
        {
            return builder.ToString(startIndex, length);
        }

        public CodeBuilderWithDecorator Clear()
        {
            builder.Clear();
            return this;
        }

        public CodeBuilderWithDecorator Append(char value, int repeatCount)
        {
            builder.Append(value, repeatCount);
            return this;
        }

        public CodeBuilderWithDecorator Append(char[] value, int startIndex, int charCount)
        {
            builder.Append(value, startIndex, charCount);
            return this;
        }

        public CodeBuilderWithDecorator Append(string value)
        {
            builder.Append(value);
            return this;
        }

        public CodeBuilderWithDecorator Append(string value, int startIndex, int count)
        {
            builder.Append(value, startIndex, count);
            return this;
        }

        public CodeBuilderWithDecorator AppendLine()
        {
            builder.AppendLine();
            return this;
        }

        public CodeBuilderWithDecorator AppendLine(string value)
        {
            builder.AppendLine(value);
            return this;
        }

        public void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count)
        {
            builder.CopyTo(sourceIndex, destination, destinationIndex, count);
        }

        public CodeBuilderWithDecorator Insert(int index, string value, int count)
        {
            builder.Insert(index, value, count);
            return this;
        }

        public CodeBuilderWithDecorator Remove(int startIndex, int length)
        {
            builder.Remove(startIndex, length);
            return this;
        }

        public CodeBuilderWithDecorator Append(bool value)
        {
            builder.Append(value);
            return this;
        }

        public CodeBuilderWithDecorator Append(sbyte value)
        {
            builder.Append(value);
            return this;
        }

        public CodeBuilderWithDecorator Append(byte value)
        {
            builder.Append(value);
            return this;
        }

        public CodeBuilderWithDecorator Append(char value)
        {
            builder.Append(value);
            return this;
        }

        public CodeBuilderWithDecorator Append(short value)
        {
            builder.Append(value);
            return this;
        }

        public CodeBuilderWithDecorator Append(int value)
        {
            builder.Append(value);
            return this;
        }

        public CodeBuilderWithDecorator Append(long value)
        {
            builder.Append(value);
            return this;
        }

        public CodeBuilderWithDecorator Append(float value)
        {
            builder.Append(value);
            return this;
        }

        public CodeBuilderWithDecorator Append(double value)
        {
            builder.Append(value);
            return this;
        }

        public CodeBuilderWithDecorator Append(decimal value)
        {
            builder.Append(value);
            return this;
        }

        public CodeBuilderWithDecorator Append(ushort value)
        {
            builder.Append(value);
            return this;
        }

        public CodeBuilderWithDecorator Append(uint value)
        {
            builder.Append(value);
            return this;
        }

        public CodeBuilderWithDecorator Append(ulong value)
        {
            builder.Append(value);
            return this;
        }

        public CodeBuilderWithDecorator Append(object value)
        {
            builder.Append(value);
            return this;
        }

        public CodeBuilderWithDecorator Append(char[] value)
        {
            builder.Append(value);
            return this;
        }

        public CodeBuilderWithDecorator Insert(int index, string value)
        {
            builder.Insert(index, value);
            return this;
        }

        public CodeBuilderWithDecorator Insert(int index, bool value)
        {
            builder.Insert(index, value);
            return this;
        }

        public CodeBuilderWithDecorator Insert(int index, sbyte value)
        {
            builder.Insert(index, value);
            return this;
        }

        public CodeBuilderWithDecorator Insert(int index, byte value)
        {
            builder.Insert(index, value);
            return this;
        }

        public CodeBuilderWithDecorator Insert(int index, short value)
        {
            builder.Insert(index, value);
            return this;
        }

        public CodeBuilderWithDecorator Insert(int index, char value)
        {
            builder.Insert(index, value);
            return this;
        }

        public CodeBuilderWithDecorator Insert(int index, char[] value)
        {
            builder.Insert(index, value);
            return this;
        }

        public CodeBuilderWithDecorator Insert(int index, char[] value, int startIndex, int charCount)
        {
            builder.Insert(index, value, startIndex, charCount);
            return this;
        }

        public CodeBuilderWithDecorator Insert(int index, int value)
        {
            builder.Insert(index, value);
            return this;
        }

        public CodeBuilderWithDecorator Insert(int index, long value)
        {
            builder.Insert(index, value);
            return this;
        }

        public CodeBuilderWithDecorator Insert(int index, float value)
        {
            builder.Insert(index, value);
            return this;
        }

        public CodeBuilderWithDecorator Insert(int index, double value)
        {
            builder.Insert(index, value);
            return this;
        }

        public CodeBuilderWithDecorator Insert(int index, decimal value)
        {
            builder.Insert(index, value);
            return this;
        }

        public CodeBuilderWithDecorator Insert(int index, ushort value)
        {
            builder.Insert(index, value);
            return this;
        }

        public CodeBuilderWithDecorator Insert(int index, uint value)
        {
            builder.Insert(index, value);
            return this;
        }

        public CodeBuilderWithDecorator Insert(int index, ulong value)
        {
            builder.Insert(index, value);
            return this;
        }

        public CodeBuilderWithDecorator Insert(int index, object value)
        {
            builder.Insert(index, value);
            return this;
        }

        public CodeBuilderWithDecorator AppendFormat(string format, object arg0)
        {
            builder.AppendFormat(format, arg0);
            return this;
        }

        public CodeBuilderWithDecorator AppendFormat(string format, object arg0, object arg1)
        {
            builder.AppendFormat(format, arg0, arg1);
            return this;
        }

        public CodeBuilderWithDecorator AppendFormat(string format, object arg0, object arg1, object arg2)
        {
            builder.AppendFormat(format, arg0, arg1, arg2);
            return this;
        }

        public CodeBuilderWithDecorator AppendFormat(string format, params object[] args)
        {
            builder.AppendFormat(format, args);
            return this;
        }

        public CodeBuilderWithDecorator AppendFormat(IFormatProvider provider, string format, params object[] args)
        {
            builder.AppendFormat(provider, format, args);
            return this;
        }

        public CodeBuilderWithDecorator Replace(string oldValue, string newValue)
        {
            builder.Replace(oldValue, newValue);
            return this;
        }

        public bool Equals(CodeBuilderWithDecorator sb)
        {
            return builder.Equals(sb);
        }

        public CodeBuilderWithDecorator Replace(string oldValue, string newValue, int startIndex, int count)
        {
            builder.Replace(oldValue, newValue, startIndex, count);
            return this;
        }

        public CodeBuilderWithDecorator Replace(char oldChar, char newChar)
        {
            builder.Replace(oldChar, newChar);
            return this;
        }

        public CodeBuilderWithDecorator Replace(char oldChar, char newChar, int startIndex, int count)
        {
            builder.Replace(oldChar, newChar, startIndex, count);
            return this;
        }

        public int Capacity
        {
            get => builder.Capacity;
            set => builder.Capacity = value;
        }

        public int MaxCapacity => builder.MaxCapacity;

        public int Length
        {
            get => builder.Length;
            set => builder.Length = value;
        }

        public char this[int index]
        {
            get => builder[index];
            set => builder[index] = value;
        }
        #endregion
    }

    // Adapter Decorator example...
    public class MyStringBuilder
    {
        private StringBuilder builder = new StringBuilder();

        public static implicit operator MyStringBuilder(string s)
        {
            var msb = new MyStringBuilder();
            msb.Append(s);
            return msb;
        }

        public static MyStringBuilder operator +(MyStringBuilder msb, string s)
        {
            msb.Append(s);
            return msb;
        }

        public override string ToString()
        {
            return builder.ToString();
        }

        #region StringBuilder delegate methods
        // all methods below was generated by Resharp and are all delegate methods fields of StringBuilder class...
        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            ((ISerializable)builder).GetObjectData(info, context);
        }

        public int EnsureCapacity(int capacity)
        {
            return builder.EnsureCapacity(capacity);
        }

        public string ToString(int startIndex, int length)
        {
            return builder.ToString(startIndex, length);
        }

        public MyStringBuilder Clear()
        {
            builder.Clear();
            return this;
        }

        public MyStringBuilder Append(char value, int repeatCount)
        {
            builder.Append(value, repeatCount);
            return this;
        }

        public MyStringBuilder Append(char[] value, int startIndex, int charCount)
        {
            builder.Append(value, startIndex, charCount);
            return this;
        }

        public MyStringBuilder Append(string value)
        {
            builder.Append(value);
            return this;
        }

        public MyStringBuilder Append(string value, int startIndex, int count)
        {
            builder.Append(value, startIndex, count);
            return this;
        }

        public MyStringBuilder AppendLine()
        {
            builder.AppendLine();
            return this;
        }

        public MyStringBuilder AppendLine(string value)
        {
            builder.AppendLine(value);
            return this;
        }

        public void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count)
        {
            builder.CopyTo(sourceIndex, destination, destinationIndex, count);
        }

        public MyStringBuilder Insert(int index, string value, int count)
        {
            builder.Insert(index, value, count);
            return this;
        }

        public MyStringBuilder Remove(int startIndex, int length)
        {
            builder.Remove(startIndex, length);
            return this;
        }

        public MyStringBuilder Append(bool value)
        {
            builder.Append(value);
            return this;
        }

        public MyStringBuilder Append(sbyte value)
        {
            builder.Append(value);
            return this;
        }

        public MyStringBuilder Append(byte value)
        {
            builder.Append(value);
            return this;
        }

        public MyStringBuilder Append(char value)
        {
            builder.Append(value);
            return this;
        }

        public MyStringBuilder Append(short value)
        {
            builder.Append(value);
            return this;
        }

        public MyStringBuilder Append(int value)
        {
            builder.Append(value);
            return this;
        }

        public MyStringBuilder Append(long value)
        {
            builder.Append(value);
            return this;
        }

        public MyStringBuilder Append(float value)
        {
            builder.Append(value);
            return this;
        }

        public MyStringBuilder Append(double value)
        {
            builder.Append(value);
            return this;
        }

        public MyStringBuilder Append(decimal value)
        {
            builder.Append(value);
            return this;
        }

        public MyStringBuilder Append(ushort value)
        {
            builder.Append(value);
            return this;
        }

        public MyStringBuilder Append(uint value)
        {
            builder.Append(value);
            return this;
        }

        public MyStringBuilder Append(ulong value)
        {
            builder.Append(value);
            return this;
        }

        public MyStringBuilder Append(object value)
        {
            builder.Append(value);
            return this;
        }

        public MyStringBuilder Append(char[] value)
        {
            builder.Append(value);
            return this;
        }

        public MyStringBuilder Insert(int index, string value)
        {
            builder.Insert(index, value);
            return this;
        }

        public MyStringBuilder Insert(int index, bool value)
        {
            builder.Insert(index, value);
            return this;
        }

        public MyStringBuilder Insert(int index, sbyte value)
        {
            builder.Insert(index, value);
            return this;
        }

        public MyStringBuilder Insert(int index, byte value)
        {
            builder.Insert(index, value);
            return this;
        }

        public MyStringBuilder Insert(int index, short value)
        {
            builder.Insert(index, value);
            return this;
        }

        public MyStringBuilder Insert(int index, char value)
        {
            builder.Insert(index, value);
            return this;
        }

        public MyStringBuilder Insert(int index, char[] value)
        {
            builder.Insert(index, value);
            return this;
        }

        public MyStringBuilder Insert(int index, char[] value, int startIndex, int charCount)
        {
            builder.Insert(index, value, startIndex, charCount);
            return this;
        }

        public MyStringBuilder Insert(int index, int value)
        {
            builder.Insert(index, value);
            return this;
        }

        public MyStringBuilder Insert(int index, long value)
        {
            builder.Insert(index, value);
            return this;
        }

        public MyStringBuilder Insert(int index, float value)
        {
            builder.Insert(index, value);
            return this;
        }

        public MyStringBuilder Insert(int index, double value)
        {
            builder.Insert(index, value);
            return this;
        }

        public MyStringBuilder Insert(int index, decimal value)
        {
            builder.Insert(index, value);
            return this;
        }

        public MyStringBuilder Insert(int index, ushort value)
        {
            builder.Insert(index, value);
            return this;
        }

        public MyStringBuilder Insert(int index, uint value)
        {
            builder.Insert(index, value);
            return this;
        }

        public MyStringBuilder Insert(int index, ulong value)
        {
            builder.Insert(index, value);
            return this;
        }

        public MyStringBuilder Insert(int index, object value)
        {
            builder.Insert(index, value);
            return this;
        }

        public MyStringBuilder AppendFormat(string format, object arg0)
        {
            builder.AppendFormat(format, arg0);
            return this;
        }

        public MyStringBuilder AppendFormat(string format, object arg0, object arg1)
        {
            builder.AppendFormat(format, arg0, arg1);
            return this;
        }

        public MyStringBuilder AppendFormat(string format, object arg0, object arg1, object arg2)
        {
            builder.AppendFormat(format, arg0, arg1, arg2);
            return this;
        }

        public MyStringBuilder AppendFormat(string format, params object[] args)
        {
            builder.AppendFormat(format, args);
            return this;
        }

        public MyStringBuilder AppendFormat(IFormatProvider provider, string format, params object[] args)
        {
            builder.AppendFormat(provider, format, args);
            return this;
        }

        public MyStringBuilder Replace(string oldValue, string newValue)
        {
            builder.Replace(oldValue, newValue);
            return this;
        }

        public bool Equals(MyStringBuilder sb)
        {
            return builder.Equals(sb);
        }

        public MyStringBuilder Replace(string oldValue, string newValue, int startIndex, int count)
        {
            builder.Replace(oldValue, newValue, startIndex, count);
            return this;
        }

        public MyStringBuilder Replace(char oldChar, char newChar)
        {
            builder.Replace(oldChar, newChar);
            return this;
        }

        public MyStringBuilder Replace(char oldChar, char newChar, int startIndex, int count)
        {
            builder.Replace(oldChar, newChar, startIndex, count);
            return this;
        }

        public int Capacity
        {
            get => builder.Capacity;
            set => builder.Capacity = value;
        }

        public int MaxCapacity => builder.MaxCapacity;

        public int Length
        {
            get => builder.Length;
            set => builder.Length = value;
        }

        public char this[int index]
        {
            get => builder[index];
            set => builder[index] = value;
        }
        #endregion
    }

    // multiple inheritance example...
    public interface IBird
    {
        int Weight { get; set; }
        void Fly();
    }

    public interface ILizard
    {
        int Weight { get; set; }
        void Crawl();
    }

    public class Bird : IBird
    {
        public int Weight { get; set; }

        public void Fly()
        {
            WriteLine($"Soaring in the sky with weight {Weight}");
        }
    }

    public class Lizard : ILizard
    {
        public int Weight { get; set; }

        public void Crawl()
        {
            WriteLine($"Crawling in the dirt with weight {Weight}");
        }
    }

    // how to join actions without use multiple inheritance...
    public class Dragon : IBird, ILizard
    {
        private Bird bird = new Bird();
        private Lizard lizard = new Lizard();

        private int weight;
        public int Weight
        {
            get { return weight; }
            set
            {
                weight = value;
                bird.Weight = value;
                lizard.Weight = value;
            }
        }

        public void Crawl()
        {
            lizard.Crawl();
        }

        public void Fly()
        {
            bird.Fly();
        }
    }

    //-----------------------------------------------------------------
    public interface IShape
    {
        string AsString();
    }    

    public class CircleDecorator : IShape
    {
        private float radius;

        public CircleDecorator(): this(0)
        {

        }

        public CircleDecorator(float radius)
        {
            this.radius = radius;
        }

        public void Resize(float factor)
        {
            radius *= factor;
        }

        public string AsString() => $"A circle with radius {radius}";
    }

    public class Square : IShape
    {
        private float side;

        public Square(): this(0)
        {

        }

        public Square(float side)
        {
            this.side = side;
        }

        public string AsString() => $"A square with side {side}";
    }

    public class ColoredShape : IShape
    {
        private IShape shape;
        private string color;

        public ColoredShape(IShape shape, string color)
        {
            this.shape = shape ?? throw new ArgumentNullException(paramName: nameof(shape));
            this.color = color ?? throw new ArgumentNullException(paramName: nameof(color));
        }

        public string AsString() => $"A shape {shape.AsString()} has the color {color}";
    }

    public class TransparentShape : IShape
    {
        private IShape shape;
        private float transparency;

        public TransparentShape(IShape shape, float transparency)
        {
            this.shape = shape ?? throw new ArgumentNullException(nameof(shape));
            this.transparency = transparency;
        }

        public string AsString() => $"{shape.AsString()} has {transparency * 100.0}% transparency";
    }

    #region CRTP demonstration (doesn't work in C#)
    // ---------------------------------------------------------------------------------------------------------------------------------
    //public class ColoredShape<T>: T ---> very commonly in c++ (CRTP = Curiously Recurring template Pattern), but in c# doesn't exist
    // in this case in c# will be this way
    public abstract class ShapeCRTP
    {
        public abstract string AsString();
    }

    public class SquareCRTP : ShapeCRTP
    {
        private float side;

        public SquareCRTP() : this(0.0f)
        {

        }

        public SquareCRTP(float side)
        {
            this.side = side;
        }

        public override string AsString() => $"A square with side {side}";
    }

    public class CircleCRTP : ShapeCRTP
    {
        private float radius;

        public CircleCRTP() : this(0.0f)
        {

        }
        public CircleCRTP(float radius)
        {
            this.radius = radius;
        }

        public void Resize(float factor)
        {
            radius *= factor;
        }

        public override string AsString() => $"A circle with radius {radius}";
    }

    //public class ColoredShape<T>: T ---> very commonly in c++ (CRTP = Curiously Recurring template Pattern), but in c# doesn't exist
    // in this case in c# will be this way
    public class ColoredShapeCRTP<T> : ShapeCRTP where T : ShapeCRTP, new()
    {
        private T shape = new T();
        private string color;

        public ColoredShapeCRTP(): this("black")
        {

        }

        public ColoredShapeCRTP(string color)
        {
            this.color = color ?? throw new ArgumentNullException(nameof(color));
        }

        public override string AsString() => $"{shape.AsString()} has the color {color}";
    }

    public class TransparentShapeCRTP<T> : ShapeCRTP where T : ShapeCRTP, new()
    {
        private T shape = new T();
        private float transparency;

        public TransparentShapeCRTP() : this(0.0f)
        {

        }
        
        public TransparentShapeCRTP(float transparency)
        {
            this.transparency = transparency;
        }

        public override string AsString() => $"{shape.AsString()} has {transparency * 100.0}% transparency";
    }
    #endregion

    public static class DecoratorExamples
    {
        public static void Demo1()
        {
            var cb = new CodeBuilderWithDecorator();
            cb.AppendLine("class xpto");

            cb.AppendLine("{");
            cb.AppendLine("}");

            WriteLine(cb);
        }

        public static void AdapterDecoratorExample()
        {
            MyStringBuilder msb = "Hello ";
            msb += "World";

            WriteLine(msb.ToString());
        }

        public static void MultipleInheritanceExample()
        {
            var d = new Dragon();
            d.Weight = 123;
            d.Fly();
            d.Crawl();
        }

        public static void DynamicDecoratorComposition()
        {
            var square = new Square(1.23f);
            WriteLine(square.AsString());

            var redSquare = new ColoredShape(square, "red");
            WriteLine(redSquare.AsString());

            var redHalfTranparentSquare = new TransparentShape(square, 0.5f);
            WriteLine(redHalfTranparentSquare.AsString());
        }

        /// <summary>
        /// This method explains that static decorators, like in CRTp C++, doesn't work in C#
        /// In C# we cannot do this (CRTP)
        /// </summary>
        public static void StaticDecoratorComposition()
        {
            // problem: in c# we cannot proxy default constructors..
            // int his case, we cannot assign a value to constructor "Square(float side)"...
            var redSquare = new ColoredShapeCRTP<SquareCRTP>("red");    // will work but the "side" cannot be assignment
            WriteLine(redSquare.AsString());

            var circle = new TransparentShapeCRTP<CircleCRTP>(0.4f);
            WriteLine(circle.AsString());
        }
    }
}
